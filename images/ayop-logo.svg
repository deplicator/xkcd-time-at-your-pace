<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
     xkcd Time: at your own pace logo
     originally by MaPePeR

     You can view the differences between this version and the original file on git
     (http://github.com/deplicator/xkcdTime_atyourownpace)
-->
<svg
   onload="setClock()"
   xmlns="http://www.w3.org/2000/svg"
   version="1.1"
   x="0px"
   y="0px"
   width="100"
   height="100"
   viewBox="0 0 100 100"
   id="ayop-logo">
  <defs>
    <style id="style_common" type="text/css"><![CDATA[
        line.hand {
            fill: none;
            stroke-linecap: round;
            stroke-linejoin: round;
            stroke-miterlimit: 8.8;
            stroke-opacity: 1;
            stroke-dasharray: none;
            stroke-dashoffset: 0;
        }
        #clock_circle {
            stroke-width: 1;
            stroke-linecap: round;
            stroke-linejoin: round;
            stroke-miterlimit: 8.8;
            stroke-opacity: 1;
            stroke-dasharray: none;
            stroke-dashoffset: 0;
        }

        #text_background {
            fill:none;
            fill-opacity: 1;
            stroke-width: 3.75px;
            stroke-linecap: round;
            stroke-linejoin: round;
            stroke-opacity: 1;
        }

        line.brick_line {
            stroke-width: 0.2; /* note that the pattern containing the line is scaled by (currently) 2.3 */
            stroke-linecap: square;
            stroke-linejoin: miter;
            stroke-miterlimit: 8.8;
            stroke-opacity: 1;
            stroke-dasharray: none;
        }
        #pyramid {
            stroke-width: 1;
            stroke-linecap: round;
            stroke-linejoin: round;
            stroke-miterlimit: 8.8;
            stroke-opacity: 1;
            stroke-dasharray: none;
            stroke-dashoffset: 0;
        }
    ]]></style>
    <style id="style_default" type="text/css"><![CDATA[
        line.hand {
            stroke: #000000;
        }
        circle {
            fill: #ffffff;
            stroke: #000000;
        }

        #text_background {
            stroke: #ffffff;
        }
        #text_foreground {
            stroke: #000000;
            stroke-width: .75;
        }

        line.brick_line {
            fill: none;
            stroke: #000000;
        }
        #pyramid {
            stroke: #000000;
        }
    ]]></style>
    <pattern
        id="pyramid_bricks"
        patternUnits="userSpaceOnUse"
        x="0.74" y="0.7" width="4" height="4" patternTransform="scale(2.3)">
      <!--
          The bricks are drawn with five lines (top line, bottom line,
          top part of right line, left line, bottom part of right line),
          so that no lines lie on the border of the pattern.
      -->
      <line class="brick_line"
            x1="0" y1="1" x2="4" y2="1" />
      <line class="brick_line"
            x1="0" y1="3" x2="4" y2="3" />
      <line class="brick_line"
            x1="3" y1="0" x2="3" y2="1" />
      <line class="brick_line"
            x1="1" y1="1" x2="1" y2="3" />
      <line class="brick_line"
            x1="3" y1="3" x2="3" y2="4" />
    </pattern>
  </defs>

  <path
     id="pyramid"
     style="fill:url(#pyramid_bricks);fill-opacity:1"
     d="M 0,86.6 L 50,0 L 100,86.6 Z" />

  <circle
     id="clock_circle"
     cx="50" cy="40" r="15" />

  <!-- clock hands: center 50,40 -->
  <!-- second hand: radius 14 -->
<!--
  <line
     id="hand_seconds"
     class="hand"
     x1="50" y1="40" x2="50" y2="26"
     style="stroke-width:.5">
    <animateTransform
      attributeName="transform"
      type="rotate"
      from="0 50 40"
      to="360 50 40"
      dur="60s"
      repeatCount="indefinite" />
  </line>
-->
  <!-- minute hand: radius 10 -->
  <line
     id="hand_minutes"
     class="hand"
     x1="50" y1="40" x2="58" y2="34"
     style="stroke-width:1">
    <animateTransform
      attributeName="transform"
      type="rotate"
      from="0 50 40"
      to="360 50 40"
      dur="60min"
      repeatCount="indefinite" />
  </line>
  <!-- hour hand: radius 5 -->
  <line
     id="hand_hours"
     class="hand"
     x1="50" y1="40" x2="47" y2="36"
     style="stroke-width:1">
    <animateTransform
      attributeName="transform"
      type="rotate"
      from="0 50 40"
      to="360 50 40"
      dur="12h"
      repeatCount="indefinite" />
  </line>

  <!-- The text is included twice:
       * the first time, the text is invisible, and only its stroke is painted in white;
       * the second time, the text is visible (without a stroke).
       Combined, this gives the text a white "outline" which makes it easier to read agains the brick background.
  -->
  <text
     id="text_background"
     x="50" y="74.5"
     font-family="Droid Serif"
     font-size="9"
     text-anchor="middle">At your own pace</text>
  <text
     id="text_foreground"
     x="50" y="74.5"
     font-family="Droid Serif"
     font-size="9"
     text-anchor="middle">At your own pace</text>
  <script type="text/javascript"><![CDATA[
      /**
        * Set the clock hands.
        *
        * This script will set the clock hands to the current time each time it is run.
        * It supports the hour, minute, and second hands and any combination of them;
        * i. e., it is not necessary to modify this script if any these hands are commented out or in.
        */
      function setClock() {
          var currentTime = new Date();
          var handHours = document.querySelectorAll("#hand_hours")[0];
          var handMinutes = document.querySelectorAll("#hand_minutes")[0];
          var handSeconds = document.querySelectorAll("#hand_seconds")[0];
          var cx = parseInt(handHours.getAttribute("x1") || handMinutes.getAttribute("x1") || handSeconds.getAttribute("x1"));
          var cy = parseInt(handHours.getAttribute("y1") || handMinutes.getAttribute("y1") || handSeconds.getAttribute("y1"));
          function getRad(degrees) {
              return degrees * (Math.PI / 180);
          }
          var degSec = currentTime.getSeconds() * 6;
          var degMin = currentTime.getMinutes() * 6
                       + degSec / (360 / 6);
          var degHour = currentTime.getHours() * 30
                        + degMin / (360 / 30);
          if (handSeconds) {
              var rad = getRad(degSec);
              handSeconds.setAttribute("x2",
                                       cx + (14 * Math.sin(rad)));
              handSeconds.setAttribute("y2",
                                       cy - (14 * Math.cos(rad)));
          }
          if (handMinutes) {
              var rad = getRad(degMin);
              handMinutes.setAttribute("x2",
                                       cx + (10 * Math.sin(rad)));
              handMinutes.setAttribute("y2",
                                       cy - (10 * Math.cos(rad)));
          }
          if (handHours) {
              var rad = getRad(degHour);
              handHours.setAttribute("x2",
                                     cx + (6 * Math.sin(rad)));
              handHours.setAttribute("y2",
                                     cy - (6 * Math.cos(rad)));
          }
      }
  ]]></script>
</svg>
